# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    app.cert_storage_dir: '%kernel.project_dir%/public/%env(CERT_STORAGE_DIR)%'
    app.public_cert_path: '%env(CERT_STORAGE_DIR)%/'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    App\Service\UserService:
        lazy: true

    App\Service\FehlerService:
        lazy: true

    App\Service\KommentarService:
        lazy: true

    App\Service\SkriptService:
        lazy: true

    App\Service\ModulService:
        lazy: true

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    gedmo.listener.softdeleteable:
        class: Gedmo\SoftDeleteable\SoftDeleteableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ '@annotation_reader' ] ]

    app.easy_admin.eventsubscriber:
        class: App\EventSubscriber\EasyAdminSubscriber
        tags:
            - { name: kernel.event_subscriber }
    
    app.events.fehlereventlistener:
        class: App\Events\FehlerEventListener
        tags:
                - { name: 'doctrine.event_listener', event: 'onFlush' }
                - { name: 'doctrine.event_listener', event: 'preRemove' }