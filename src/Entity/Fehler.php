<?php
// Generated by Symfony php bin/console make:entity (run by ali-kemal.yalama ( ali-kemal.yalama@iubh.de ) )
namespace App\Entity;

use App\Model\DatumTrait;
use App\Model\EinreicherTrait;
use Doctrine\ORM\Mapping as ORM;
use App\Repository\FehlerRepository;
use Doctrine\Common\Collections\Collection;
use Doctrine\Common\Collections\ArrayCollection;


/**
 * @ORM\Entity(repositoryClass=FehlerRepository::class)
 */
class Fehler
{
    /**
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer")
     */
    private $id;

    /**
     * @ORM\Column(type="string", columnDefinition="ENUM('CLOSED', 'ESCALATED', 'OPEN', 'REJECTED', 'WAITING')")
     */
    private $status;

    /**
     * @ORM\Column(type="integer")
     */
    private $seite;

    /**
     * @ORM\OneToMany(targetEntity=Kommentar::class, mappedBy="fehler", orphanRemoval=true, cascade={"persist"})
     */
    private $kommentare;

    /**
     * @ORM\ManyToMany(targetEntity=Fehler::class)
     */
    private $verwandteFehler;

    /**
     * @ORM\ManyToOne(targetEntity=Skript::class, inversedBy="fehler")
     * @ORM\JoinColumn(nullable=false)
     */
    private $skript;

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    private $name;

    // unmapped fields
    private $kommentar; // added by karim.saad@iubh.de - 22.12.2021 10:33 - used for FehlerCrudController (as ROLE_STUDENT)
    
    // Traits
    use DatumTrait;
    use EinreicherTrait; // added by karim.saad (karim.saad@iubh.de) - 20.12.2021 03:26

    public function __construct ()
    {
        $this -> kommentare      = new ArrayCollection();
        $this -> verwandteFehler = new ArrayCollection();
        $this -> kommentar       = "";
    }

    public function __toString ()
    {
        $name = $this -> getName    ();
        $id   = $this -> getId      ();
        return "$name ($id) ";
    }

    public function getId (): ?int
    {
        return $this -> id;
    }

    public function getStatus (): ?string
    {
        return $this -> status;
    }

    public function setStatus ( string $status ): self
    {
        $this -> status = $status;
        return $this;
    }

    public function getSeite (): ?int
    {
        return $this -> seite;
    }

    public function setSeite ( int $seite ): self
    {
        $this -> seite = $seite;
        return $this;
    }

    /**
     * @return Collection|Kommentar[]
     */
    public function getKommentare (): Collection
    {
        return $this -> kommentare;
    }
    
    public function setKommentar (String $kommentar)
    {
        $this -> kommentar = $kommentar;
        return $this;
    }

    public function getKommentar () :string
    {
        return $this -> kommentar;
    }

    public function getDescriptionKommentar ()
    {
        if (count($this->getKommentare()) > 0)
            return $this -> getKommentare()[0]->getText();
        
        return null;
    }

    public function addKommentare ( Kommentar $kommentare ): self
    {
        if ( ! $this -> kommentare -> contains ( $kommentare ) ) 
        {
            $this       -> kommentare[] = $kommentare;
            $kommentare -> setFehler    ( $this );
        }

        return $this;
    }

    public function removeKommentare ( Kommentar $kommentare ): self
    {
        if ( $this -> kommentare -> removeElement ( $kommentare ) )
        {
            // set the owning side to null (unless already changed)
            if ( $kommentare -> getFehler () === $this ) 
            {
                $kommentare -> setFehler    ( null );
            }
        }

        return $this;
    }

    /**
     * @return Collection|self[]
     */
    public function getVerwandteFehler (): Collection
    {
        return $this -> verwandteFehler;
    }

    public function addVerwandteFehler ( self $verwandteFehler ): self
    {
        if  ( $this ->  getId() == $verwandteFehler ->  getId() ) 
        {
            return $this;
        }
        
        if (! $this -> verwandteFehler -> contains ( $verwandteFehler ) )
        {
            $this -> verwandteFehler[] = $verwandteFehler;
            $verwandteFehler -> addVerwandteFehler ($this);
        }
        return $this;
    }

    public function removeVerwandteFehler ( self $verwandteFehler ): self
    {
        if ( $this -> verwandteFehler -> contains ( $verwandteFehler ) )
        {
            $this -> verwandteFehler -> removeElement ( $verwandteFehler );
            $verwandteFehler -> removeVerwandteFehler ($this);
        }
        return $this;
    }

    public function open ()
    {
        $this -> setStatus ( 'OPEN' );
    }

    public function close () 
    {
        $this -> setStatus ( 'CLOSED' );
    }

    public function escalate () 
    {
        $this -> setStatus ( 'ESCALATED' );
    }

    public function wait ()
    {
        $this -> setStatus ( 'WAITING' );
    }

    public function getSkript (): ?Skript
    {
        return $this -> skript;
    }

    public function setSkript ( ?Skript $skript ): self
    {
        $this -> skript = $skript;
        return $this;
    }

    public function getName (): ?string
    {
        return $this -> name;
    }

    public function setName ( ?string $name ): self
    {
        $this -> name = $name;
        return $this;
    }
}
