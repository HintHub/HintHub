<?php
// Generated by Symfony php bin/console make:entity 
// @author ali-kemal.yalama ( ali-kemal.yalama@iubh.de )

namespace App\Entity;

use App\Repository\ModulRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity(repositoryClass=ModulRepository::class)
 */
class Modul
{
    /**
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer")
     */
    private $id;

    /**
     * @ORM\Column(type="string", length=255)
     */
    private $kuerzel;

    /**
     * @ORM\Column(type="string", length=255)
     */
    private $name;

    /**
     * @ORM\OneToMany(targetEntity=Skript::class, mappedBy="modul", orphanRemoval=true, cascade={"persist", "remove"})
     */
    private $skripte;

    /**
     * @ORM\OneToOne(targetEntity=Skript::class, cascade={"persist", "remove"})
     */
    private $aktuellesSkript;

    /**
     * @ORM\ManyToOne(targetEntity=User::class, inversedBy="tutorIn", cascade={"persist", "remove"})
     * @ORM\JoinColumn(nullable=true, onDelete="SET NULL")
     */
    private $tutor;

    /**
     * @ORM\ManyToMany(targetEntity=User::class, mappedBy="studentIn")
     */
    private $studenten;

    public function __construct ()
    {
        $this -> skripte    = new ArrayCollection ();
        $this -> fehler     = new ArrayCollection ();
        $this->studenten = new ArrayCollection();
    }

    public function __toString ()
    {
        $name   = $this -> getName  ();
        $id     = $this -> getId    ();
        return "$name ($id)";
    }

    public function getId (): ?int
    {
        return $this -> id;
    }

    public function getKuerzel (): ?string
    {
        return $this -> kuerzel;
    }

    public function setKuerzel ( string $kuerzel ): self
    {
        $this -> kuerzel = $kuerzel;
        return $this;
    }

    public function getName (): ?string
    {
        return $this -> name;
    }

    public function setName ( string $name ): self
    {
        $this -> name = $name;
        return $this;
    }

    /**
     * @return Collection|Skript[]
     */
    public function getSkripte (): Collection
    {
        return $this -> skripte;
    }

    public function addSkripte ( Skript $skripte ): self
    {
        if (! $this -> skripte -> contains ( $skripte ) )
        {
            $this    -> skripte[] = $skripte;
            $skripte -> setModul    ( $this );
        }
        return $this;
    }

    public function removeSkripte ( Skript $skripte ): self
    {
        if ( $this -> skripte -> removeElement ( $skripte ) )
        {
            // set the owning side to null (unless already changed)
            if ( $skripte -> getModul () === $this ) 
            {
                $skripte -> setModul    ( null );
            }
        }
        return $this;
    }

    public function getAktuellesSkript (): ?Skript
    {
        return $this -> aktuellesSkript;
    }

    public function setAktuellesSkript ( ?Skript $aktuellesSkript ): self
    {
        $this -> aktuellesSkript = $aktuellesSkript;
        return $this;
    }

    /**
     * @return Collection|Fehler[]
     */
    public function getFehler (): Collection
    {
        return $this -> fehler;
    }

    public function addFehler ( Fehler $fehler ): self
    {
        if ( ! $this -> fehler -> contains ( $fehler ) )
        {
            $this   -> fehler[] = $fehler;
            $fehler -> setModul     ( $this );
        }
        return $this;
    }

    public function removeFehler ( Fehler $fehler ): self
    {
        if ( $this -> fehler -> removeElement ( $fehler ) )
        {
            // set the owning side to null (unless already changed)
            if ( $fehler -> getModul () === $this )
            {
                $fehler -> setModul     ( null );
            }
        }
        return $this;
    }

    public function getTutor(): ?User
    {
        return $this->tutor;
    }

    public function setTutor(?User $tutor): self
    {
        if($tutor !== null) {
            if(!$tutor->isTutor()) {
                return $this; //TODO ggf. exception
            }
        }
        
        $this->tutor = $tutor;

        return $this;
    }

    /**
     * @return Collection|User[]
     */
    public function getStudenten(): Collection
    {
        return $this->studenten;
    }

    public function addStudenten(User $studenten): self
    {
        if(!$studenten->isStudent()) {
            return $this; //TODO: ggf. exception
        }

        if (!$this->studenten->contains($studenten)) {
            $this->studenten[] = $studenten;
            $studenten->addStudentIn($this);
        }

        return $this;
    }

    public function removeStudenten(User $studenten): self
    {
        if ($this->studenten->removeElement($studenten)) {
            $studenten->removeStudentIn($this);
        }

        return $this;
    }
}
